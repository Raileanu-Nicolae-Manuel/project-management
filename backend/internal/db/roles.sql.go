// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: roles.sql

package db

import (
	"context"
)

const getProjectRole = `-- name: GetProjectRole :one
SELECT id, name, description, created_at FROM project_roles
WHERE id = ? LIMIT 1
`

func (q *Queries) GetProjectRole(ctx context.Context, id int64) (ProjectRole, error) {
	row := q.db.QueryRowContext(ctx, getProjectRole, id)
	var i ProjectRole
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const getProjectRoleByName = `-- name: GetProjectRoleByName :one
SELECT id, name, description, created_at FROM project_roles
WHERE name = ? LIMIT 1
`

func (q *Queries) GetProjectRoleByName(ctx context.Context, name string) (ProjectRole, error) {
	row := q.db.QueryRowContext(ctx, getProjectRoleByName, name)
	var i ProjectRole
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const listProjectRoles = `-- name: ListProjectRoles :many
SELECT id, name, description, created_at FROM project_roles
ORDER BY id
`

func (q *Queries) ListProjectRoles(ctx context.Context) ([]ProjectRole, error) {
	rows, err := q.db.QueryContext(ctx, listProjectRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProjectRole
	for rows.Next() {
		var i ProjectRole
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
