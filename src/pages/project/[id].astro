---
import Layout from '@layouts/root.astro';
import { getSession } from 'auth-astro/server';

const { id } = Astro.params;
const session = await getSession(Astro.request);

// Initialize data containers
let repo: any = null;
let branches: any[] = [];
let commits: any[] = [];
let pullRequests: any[] = [];

if (session?.accessToken) {
  // First get the repository details
  const repoResponse = await fetch('https://api.github.com/user/repos', {
    headers: {
      Authorization: `Bearer ${session.accessToken}`,
      Accept: 'application/vnd.github.v3+json',
    },
  });
  const repos = await repoResponse.json();
  repo = repos.find((r: any) => r.id.toString() === id);

  if (repo) {
    // Fetch branches
    const branchesResponse = await fetch(`https://api.github.com/repos/${repo.full_name}/branches`, {
      headers: {
        Authorization: `Bearer ${session.accessToken}`,
        Accept: 'application/vnd.github.v3+json',
      },
    });
    branches = await branchesResponse.json();

    // Fetch recent commits
    const commitsResponse = await fetch(`https://api.github.com/repos/${repo.full_name}/commits`, {
      headers: {
        Authorization: `Bearer ${session.accessToken}`,
        Accept: 'application/vnd.github.v3+json',
      },
    });
    commits = await commitsResponse.json();
    console.log(commits)

    // Fetch pull requests
    const prResponse = await fetch(`https://api.github.com/repos/${repo.full_name}/pulls`, {
      headers: {
        Authorization: `Bearer ${session.accessToken}`,
        Accept: 'application/vnd.github.v3+json',
      },
    });
    pullRequests = await prResponse.json();
  }
}
---

<Layout>
  {!session ? (
    <p>Please log in to view repository details</p>
  ) : !repo ? (
    <p>Repository not found</p>
  ) : (
    <div class="p-6">
      <h1 class="text-2xl font-bold mb-6">{repo.name}</h1>
      
      <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
        {/* Repository Info */}
        <div class="bg-white p-4 rounded-lg shadow">
          <h2 class="text-xl font-semibold mb-4">Repository Info</h2>
          <p>Description: {repo.description}</p>
          <p>Stars: {repo.stargazers_count}</p>
          <p>Forks: {repo.forks_count}</p>
          <p>Default Branch: {repo.default_branch}</p>
        </div>

        {/* Branches */}
        <div class="bg-white p-4 rounded-lg shadow">
          <h2 class="text-xl font-semibold mb-4">Branches</h2>
          <ul class="space-y-2">
            {branches.map((branch) => (
              <li>{branch.name}</li>
            ))}
          </ul>
        </div>

        {/* Recent Commits */}
        <div class="bg-white p-4 rounded-lg shadow">
          <h2 class="text-xl font-semibold mb-4">Recent Commits</h2>
          <ul class="space-y-2">
            {commits.slice(0, 5).map((commit) => (
              <li>
                <p class="font-medium">{commit.commit.message}</p>
                <p class="text-sm text-gray-600">
                  by {commit.commit.author.name} on {new Date(commit.commit.author.date).toLocaleDateString()}
                </p>
              </li>
            ))}
          </ul>
        </div>

        {/* Pull Requests */}
        <div class="bg-white p-4 rounded-lg shadow">
          <h2 class="text-xl font-semibold mb-4">Pull Requests</h2>
          {pullRequests.length === 0 ? (
            <p>No open pull requests</p>
          ) : (
            <ul class="space-y-2">
              {pullRequests.map((pr) => (
                <li>
                  <a href={pr.html_url} target="_blank" class="text-blue-600 hover:underline">
                    #{pr.number} {pr.title}
                  </a>
                  <p class="text-sm text-gray-600">by {pr.user.login}</p>
                </li>
              ))}
            </ul>
          )}
        </div>
      </div>
    </div>
  )}
</Layout> 